<?php

use Drupal\Core\Access\AccessResultForbidden;
use Drupal\Core\Url;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Render\Markup;
use Drupal\node\NodeInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\HttpKernelInterface;

/**
 * Implements hook_page_attachments().
 */
function reservoir_ui_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'reservoir_ui/welcome';
}

function reservoir_ui_menu_local_actions_alter(&$local_actions) {
  $local_actions['node.type_add']['title'] = 'Add content model';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reservoir_ui_form_node_type_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['submission']['preview_mode']['#access'] = new AccessResultForbidden();
  $form['display']['#access'] = new AccessResultForbidden();
}

function reservoir_ui_toolbar_alter(&$items) {
  unset($items['home']);

  $items['reservoir_content'] = array(
    '#type' => 'toolbar_item',
    'tab' => array(
      '#type' => 'link',
      '#title' => t('Content'),
      '#url' => Url::fromRoute('<front>'),
      '#options' => [
        'set_active_class' => TRUE,
      ],
      '#attributes' => array(
        'class' => array('toolbar-icon', 'toolbar-icon-system-admin-content'),
      ),
    ),
    '#weight' => -35,
  );
  $items['reservoir_api'] = array(
    '#type' => 'toolbar_item',
    'tab' => array(
      '#type' => 'link',
      '#title' => t('API'),
      '#url' => Url::fromRoute('reservoir_ui.api'),
      '#options' => [
        'set_active_class' => TRUE,
      ],
      '#attributes' => array(
        'class' => array('toolbar-icon', 'toolbar-icon-system-modules-list'),
      ),
    ),
    '#weight' => -30,
  );
  $items['reservoir_content_models'] = array(
    '#type' => 'toolbar_item',
    'tab' => array(
      '#type' => 'link',
      '#title' => t('Content models'),
      '#url' => Url::fromRoute('entity.node_type.collection'),
      '#options' => [
        'set_active_class' => TRUE,
      ],
      '#attributes' => array(
        'class' => array('toolbar-icon', 'toolbar-icon-system-admin-structure'),
      ),
    ),
    '#weight' => -25,
  );
  $items['reservoir_data_access'] = array(
    '#type' => 'toolbar_item',
    'tab' => array(
      '#type' => 'link',
      '#options' => [
        'set_active_class' => TRUE,
      ],
      '#title' => t('Access control'),
      '#url' => Url::fromRoute('entity.user.collection'),
      '#attributes' => array(
        'class' => array('toolbar-icon', 'toolbar-icon-entity-user-collection'),
      ),
    ),
    '#weight' => -20,
  );

  $items['reservoir_backend'] = array(
    '#type' => 'toolbar_item',
    'tab' => array(
      '#type' => 'link',
      '#title' => t('Manage back end'),
      '#url' => Url::fromRoute('user.page'),
      '#attributes' => array(
        'class' => array('toolbar-icon', 'toolbar-icon-menu'),
      ),
    ),
    'tray' => array(
      '#heading' => t('Back end management'),
      'user_links' => array(
        '#theme' => 'links__toolbar_reservoir_ui',
        '#links' => [
          'configuration' => [
            'title' => t('Configuration'),
            'url' => Url::fromRoute('system.admin_config'),
            'attributes' => [
              'class' => [
                'toolbar-icon',
                'toolbar-icon-system-admin-config',
              ],
            ],
          ],
          'reports' => [
            'title' => t('Reports'),
            'url' => Url::fromRoute('system.admin_reports'),
            'attributes' => [
              'class' => [
                'toolbar-icon',
                'toolbar-icon-system-admin-reports',
              ],
            ],
          ],
          'help' => [
            'title' => t('Help'),
            'url' => Url::fromRoute('help.main'),
            'attributes' => [
              'class' => [
                'toolbar-icon',
                'toolbar-icon-help-main',
              ],
            ],
          ],
        ],
        '#attributes' => array(
          'class' => array('toolbar-reservoir-ui'),
        ),
      ),
    ),
    '#weight' => -15,
  );

  unset($items['administration']);


}

function reservoir_ui_menu_links_discovered_alter(&$links) {
  unset($links['system.site_information_settings']);
  unset($links['block.admin_display']);
  unset($links['system.themes_page']);
  unset($links['filter.tips_all']);
  unset($links['entity.date_format.collection']);
  unset($links['views_ui.reports_plugins']);
  unset($links['system.rss_feeds_settings']);

  $links['system.admin_content']['title'] = t('Data');
  $links['system.admin_content']['description'] = t('Find and manage data.');
  $links['system.admin_structure']['title'] = t('Data modeling');
  $links['system.admin_structure']['description'] = t('Model data: content types, comment types, taxonomies â€¦');
  $links['system.modules_list']['parent'] = 'system.admin_config';


  $links['entity.user.collection']['weight'] = 3;
  $links['system.admin_config']['weight'] = 4;

  $links['filter.admin_overview']['parent'] = 'system.admin_structure';

  $links['system.admin_config']['title'] = t('Back end configuration');


  $links['entity.user.collection']['title'] = t('Access control');
  $links['user.admin_index']['title'] = t('Users');
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 *
 * @todo Instead of this hack, override the route definition for entity.node.canonical, and specify a custom controller to use instead of NodeViewController. Alters are brittle. Then we perhaps could also list *every* field, without relying on an EntityViewDisplay?
 */
function reservoir_ui_node_view_alter(array &$build, NodeInterface $entity, EntityViewDisplayInterface $display) {
  // Retrieve JSON API representation of this node.
  $jsonapi_url = _reservoir_ui_get_node_jsonapi_url($entity);
  $response_body = _reservoir_ui_do_subrequest($jsonapi_url)->getContent();

  // Generate markup.
  $json = json_encode(json_decode($response_body), JSON_PRETTY_PRINT);
  $markup = <<<HTML
<script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script>
<p><a href="$jsonapi_url"><code>$jsonapi_url</code></a></p>
<pre class="prettyprint lang-js">$json</pre>
HTML;

  // Add to render array.
  $build['jsonapi_prefix'] = [
    '#weight' => -100000,
    '#prefix' => '<table class="node-html-and-jsonapi"><thead><tr><th>HTML representation</th><th>JSON API representation</th></tr></thead><tbody></tbody><tr><td>',
  ];
  $build['jsonapi'] = [
    '#weight' => 10000,
    '#prefix' => '</td><td><div class="node-jsonapi-preview">',
    '#suffix' => '</div></td></tr></tbody></table>',
    '#markup' => Markup::create($markup),
    '#attached' => [
      'library' => [
        'reservoir_ui/node-jsonapi-preview',
      ],
    ],
  ];
}

/**
 * Gets the individual JSON API URL for the given node.

 * @param \Drupal\node\NodeInterface $node
 *   A node.
 *
 * @return string
 *   The generated URL.
 */
function _reservoir_ui_get_node_jsonapi_url(NodeInterface $node) {
  return Url::fromRoute(sprintf('jsonapi.node--%s.individual', $node->bundle()), [
    'node' => $node->uuid(),
  ])->toString(TRUE)->getGeneratedUrl();
}

/**
 * Performs a subrequest.
 *
 * @param string $url
 *   The string to send a subrequest to.
 *
 * @return \Symfony\Component\HttpFoundation\Response
 *   The response.
 */
function _reservoir_ui_do_subrequest($url) {
  // Create a subrequest.
  $request = \Drupal::request();
  $subrequest = Request::create($url, 'GET', $request->query->all(), $request->cookies->all(), [], $request->server->all());
  if ($session = $request->getSession()) {
    $subrequest->setSession($session);
  }

  // Execute the subrequest.
  $response = \Drupal::service('http_kernel')->handle($subrequest, HttpKernelInterface::SUB_REQUEST);
  // @todo Remove this when https://www.drupal.org/node/2613044 lands.
  \Drupal::requestStack()->pop();

  return $response;
}